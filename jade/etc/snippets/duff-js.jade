extends ../../templates/main

block main
  .grid_12
    h2 Duff's Device in JavaScript
    p
      |  For those unfamiliar with Duff's device,
      a(href='http://en.wikipedia.org/wiki/Duff\'s_device') Wikipedia
      |  is a good starting point. Essentially it's a method for reducing overhead managing loops. Typically it's used in lower-level languages, so it seems a bit out of place in JavaScript.
    p
      |  I will discuss my evolving implementation of Duff's device in JavaScript, as well as its application, performance and validity as an optimization technique. I'll be implementing a foreach function which can be used to optimize any loop over an array.
  .grid_12
    h3 Implementation
    pre.
      \nvar duff = function (arr, f) {
          var len = arr.length,
              pos = 0;
          
          while (pos < len) {
              switch (pos % 10) {
                  case 0: f(arr[pos]); pos++;
                  case 9: f(arr[pos]); pos++;
                  case 8: f(arr[pos]); pos++;
                  case 7: f(arr[pos]); pos++;
                  case 6: f(arr[pos]); pos++;
                  case 5: f(arr[pos]); pos++;
                  case 4: f(arr[pos]); pos++;
                  case 3: f(arr[pos]); pos++;
                  case 2: f(arr[pos]); pos++;
                  case 1: f(arr[pos]); pos++;
              }
          }
      };
              
  h3.grid_12 A Simple Example
  section.grid_6
    pre.
      \n// A simple example
      duff([1, 2, 3, 4], function (num) {
          console.log(num);
      });
              
  section.grid_6
    p
      |  The example just prints each element of the array to the console, which isn't particularly interesting. To benchmark and get an idea for how well this performs, I'll need to write something more complicated. One area I see this optimization potentially being useful is in games, drawing with the HTML5 canvas.
  section.grid_12
    h3 Something More Complicated
    p
      |  I wrote my HTML5 canvas benchmark using jsPerf:
      a(href='http://jsperf.com/duff-foreach') http://jsperf.com/duff-foreach
    p
      |  Basically, it creates a bunch of random squares, each with a random velocity, and then animates moving and drawing them. In hindsight, this was a pretty bad test. Result units are iterations per second (higher is better):
    table
      tr
        td
        th Duff-Style
        th Normal
      tr
        td Chrome 14.0.835
        td 687
        td 689
      tr
        td Firefox 6.0
        td 114
        td 120
    p
      |  The Duff-Style forEach was on average slightly worse, but just barely. Profiling with Chrome quickly reveals the biggest problem:
    img(src='/img/snippets/duff.png')
    p
      |  Only 3% of the time was being spent managing the loop. At best the optimization would reduce the runtime by 3%, and in practice it did much worse.
  section.grid_12
    h3 Something Less Complicated
    p
      |  In order to take advantage of Duff's Device, you need something that requires very few operations in the inner-most loop. The copy operation in the original use is an excellent example of this. Another good example would be finding the maximum element in an array. Using the foreach implementation above, I wrote a set of tests in jsPerf:
      a(href='http://jsperf.com/unrolledtest/3') http://jsperf.com/unrolledtest/3
    p To my surprise, these tests did equally poor:
    table
      tr
        td
        th Alternate Duff style 
        th Duff style 
        th Rolled 
        th Unrolled 
      tr
        td Chrome 14.0.835
        td 7,682
        td 8,179
        td 28,706
        td 32,171
      tr
        td Firefox 6.0
        td 4,263
        td 7,962
        td 8,904
        td 46,735
    p
      |  (Keep in mind that the scores for each test are relative. Comparing these numbers to the previous table's numbers would be meaningless)
  section.grid_12
    h3 Something Just Right
    p
      |  The manually unrolled test I included revealed the biggest issue: the cost of the additional function calls inside the body of the loop. Function calls (as I should have guessed) are very expensive in JavaScript compared to evaluating simple expressions and inequalities.
    p
      |  The remaining two approaches I have to test involve code generation. My options are to either:
    ul.bullet
      li Generate the JavaScript client side and eval it.
      li Generate the JavaScript server side and include it.
    p
      span.nope
        |  I wrote a quick and dirty test for the client side option that revealed that eval'd functions are very slow. You can check my test here if you're not convinced:
        a http://jsperf.com/evaled-versus-literal
        |  .
      |  Just kidding,
      a(href='http://jsperf.com/evaled-versus-literal/2') I don't know what I'm talking about
      |  .
  section.grid_12
    h3 Future Work
    p
      |  I hear that
      a(href='https://developer.mozilla.org/en/javascript_typed_arrays') typed arrays
      |  are blazing fast, especially in recent versions of Firefox. I'd like to assess what impact Duff's Device has when iterating over a typed array. I would also like to try implementing Duff's Device for iteration over an object's properties.
    p If you have any comments or suggestions, please tweet or email me.
  section.grid_12
    h3
      abbr(title='Too long; didn\'t read (summary)') tl;dr
    ul.bullet
      li Duff's device works best on small operations over large sets.
      li Function calls are more expensive than evaluating inequalities.
